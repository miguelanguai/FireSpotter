async function fetchFirmsData(source,countryAbbreviation){const apiUrl=`https://firms.modaps.eosdis.nasa.gov/api/country/csv/8b8845657503cd8c75f8b4a0a7f8b177/${source}/${countryAbbreviation}/1`,csvResponse=await fetch(apiUrl);let data=(await csvResponse.text()).trim().split("\n").slice(1),firmsData=[];return data.length>0&&(firmsData=formatFirmsData(data)),firmsData}function formatFirmsData(firmsData){return firmsData.map((data=>{const point=data.split(",");return{latitude:parseFloat(point[1]),longitude:parseFloat(point[2]),hour:parseInt(point[7].padStart(4,"0").substring(0,2)),frp:parseFloat(point[13])}}))}async function fetchOpenWeatherData(latitude,longitude){const apiUrl=`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=efd53a1ca3bae9d1aae362ddf19cbbeb`,response=await fetch(apiUrl),openWeatherData=await response.json(),windDeg=openWeatherData.wind.deg,windSpeed=openWeatherData.wind.speed,windGust=void 0!==openWeatherData.wind.gust,{temp:temp,humidity:humidity}=openWeatherData.main;return{windDeg:windDeg,windSpeed:windSpeed,windGust:windGust,temp:temp,humidity:humidity,nearbyCity:openWeatherData.name}}function propagationAlgorithm(temp,humidity,windDeg,windSpeed,hour){const flammability=[[1.1,1.1,1.1,1.1],[1.1,1.1,1.1,1.2],[1.1,1.1,1.1,1.3],[1.2,1.1,1.1,1.4],[1.26,1.25,1.2,1.25],[1.1,1.5,1.3,1.15],[1.15,1.85,1.4,1.1],[1.18,2,1.5,1.26],[1.2,1.85,1.6,1.2],[1.1,1.5,1.7,1.1],[1.1,1.25,1.8,1.1],[1.1,1.1,1.7,1.1],[1.1,1.1,1.5,1.1],[1.1,1.1,1.3,1.1]],kTemp=(temp-173.15)/(373.15-173.15)*.9+.1,kHum=(100-humidity)/100;let kFuelIndex=-1;hour>=6&&hour<=19&&(kFuelIndex=hour-6);const kFcPrima=(deflectionAngle=0)=>{let trueAngle=.0111*(windDeg-deflectionAngle-45)+.5;return(windDeg<45||windDeg>90)&&(trueAngle=1-trueAngle),trueAngle};let kFc;kFc=windDeg>0&&windDeg<90?kFcPrima():windDeg>90&&windDeg<180?kFcPrima(90):windDeg>180&&windDeg<270?kFcPrima(180):windDeg>270&&windDeg<360?kFcPrima(270):45===windDeg||135===windDeg||225===windDeg||315===windDeg?.5:1;const kFuelPrima=cardinalPoint=>kFc*(-1===kFuelIndex?1:flammability[kFuelIndex][cardinalPoint]);let kFuel;return kFuel=windDeg>45&&windDeg<135?kFuelPrima(2):windDeg>135&&windDeg<225?kFuelPrima(0):windDeg>225&&windDeg<315?kFuelPrima(3):windDeg>315&&windDeg<45?kFuelPrima(1):kFc,3600*windSpeed*kFc*kHum*.5*kTemp*kFuel}async function getForecastData(points){return Promise.all(points.map((async point=>{const{latitude:latitude,longitude:longitude}=point,openWeatherData=await fetchOpenWeatherData(latitude,longitude);return{...point,...openWeatherData}})))}function wrapPoints(points){points.sort(((a,b)=>a.nearbyCity.localeCompare(b.nearbyCity)));let hotSpotCount=0,fireCount=0,hotSpots=[],fires=[],cityWrap=[],lastKey="";for(let i=0;i<points.length;i++){const point=points[i],nearbyCity=point.nearbyCity;lastKey!==nearbyCity&&(lastKey&&(areFires(cityWrap)?fires[fireCount++]=cityWrap.map((fire=>{const{temp:temp,humidity:humidity,windDeg:windDeg,windSpeed:windSpeed,hour:hour}=fire;return fire.propagation=propagationAlgorithm(temp,humidity,windDeg,windSpeed,hour),fire})):hotSpots[hotSpotCount++]=cityWrap,cityWrap=[]),lastKey=nearbyCity),cityWrap.push(point)}return{fires:fires,hotSpots:hotSpots}}function areFires(points){let areFires=!1;for(let i=0;!areFires&&i<points.length;i++){const{frp:frp}=points[i];frp>10&&(areFires=!0)}return areFires}export async function pointsTracker(source,countryAbbreviation){const firmsPoints=await fetchFirmsData(source,countryAbbreviation);return wrapPoints(await getForecastData(firmsPoints))}